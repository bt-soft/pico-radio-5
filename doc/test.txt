/*
    // 2. Zajszint becslése
    float noiseSum = 0.0f;
    int noiseBinCount = 0;
    int noiseWindow = 50;
    int noiseGap = 10;
    for (int i = startBin - noiseWindow; i < startBin - noiseGap; ++i) {
        if (i >= 0) {
            noiseSum += fftData[i];
            noiseBinCount++;
        }
    }
    for (int i = endBin + noiseGap; i < endBin + noiseWindow; ++i) {
        if (i < (int)fftSize / 2) {
            noiseSum += fftData[i];
            noiseBinCount++;
        }
    }
    float averageNoise = (noiseBinCount > 0) ? (noiseSum / noiseBinCount) : 1.0f;
    noiseLevel_ = averageNoise;

    // 3. Dinamikus küszöb beállítása
    signalThreshold_ = noiseLevel_ * NOISE_FLOOR_FACTOR;
    if (signalThreshold_ < MINIMUM_THRESHOLD) {
        signalThreshold_ = MINIMUM_THRESHOLD;
    }

    // =================================================================
    // Állapotgép logika az eredeti CwDecoder.cpp alapján
    // =================================================================
    // === Átemelt logika a pico-radio-2 CwDecoder.cpp-ből ===
    constexpr int MAX_CW_ELEMENTS = 6;
    bool currentToneState = (peakBin != -1 && peakMagnitude > signalThreshold_);
    unsigned long currentTimeMs = millis();
    char decodedChar = '\0';

    // Squelch feltétel eltávolítva: csak a dinamikus küszöb dönt

    // Teljesen adaptív referencia idők
    float dotRef = (dotMs_ > 0) ? dotMs_ : 60.0f;
    float dashRef = (dashMs_ > 0) ? dashMs_ : 3.0f * dotRef;
    float gapRef = (gapMs_ > 0) ? gapMs_ : 2.0f * dotRef;
    unsigned long charGapMin = (unsigned long)(gapRef * 0.8f);
    unsigned long charGapMax = (unsigned long)(gapRef * 2.2f);
    unsigned long wordGapMin = (unsigned long)(gapRef * 4.0f);

    static bool waitingForNormalGap_ = false;
    if (currentToneState) {
        lastActivityMs_ = currentTimeMs;
        if (!measuringTone_) {
            wordSpaceProcessed_ = false;
            unsigned long gap = leadingEdgeTimeMs_ > 0 ? (currentTimeMs - leadingEdgeTimeMs_) : 0;
            // Ha reset után vagyunk, első hosszú gap-et tanuljuk be, utána várunk normális gap-re
            if (gap >= 2000) {
                if (resetAfterLongElement_) {
                    movingGapMs_ = gap;
                    DEBUG("CW: RESET UTÁNI HOSSZÚ GAP BETANULVA: %lu ms\n", gap);
                    resetAfterLongElement_ = false;
                    waitingForNormalGap_ = true;
                }
                // Amíg túl nagy a gap, csak várunk, nem logolunk, nem tanulunk
                toneIndex_ = 0;
                memset(rawToneDurations_, 0, sizeof(rawToneDurations_));
                return;
            } else if (waitingForNormalGap_) {
                // Most jött egy normális gap, visszaállunk normál működésbe
                waitingForNormalGap_ = false;
            }
            DEBUG("CW: HANG KEZDETE, gap: %lu ms, movingGapMs_: %lu\n", gap, movingGapMs_);
            // Teljesen adaptív gap tanulás (csak ha nem túl nagy a gap)
            if (gap > 0 && gap < 2000) {
                if (gapMs_ == 0)
                    gapMs_ = gap;
                else
                    gapMs_ = 0.7f * gapMs_ + 0.3f * gap;
            }
            // Eredeti movingGapMs_ logika megmarad a resethez
            if (gap > 0) {
                if (movingGapMs_ == 0)
                    movingGapMs_ = gap;
                else
                    movingGapMs_ = (unsigned long)(GAP_ALPHA * gap + (1.0f - GAP_ALPHA) * movingGapMs_);
            }
        }
    }

    if (currentTimeMs - lastActivityMs_ > MAX_SILENCE_MS) {
        if (!inInactiveState) {
            DEBUG("CW: Reset tétlenség miatt (%lu ms inaktivitás)\n", MAX_SILENCE_MS);
            clear();
            inInactiveState = true;
        }
        return;
    }

    static unsigned long lastResetMs = 0;
    unsigned long minRestartGap = (movingGapMs_ > 0) ? movingGapMs_ : dotRef;
    if (!decoderStarted_ && !measuringTone_ && currentToneState) {
        // Csak akkor engedjük újraindítani, ha a reset óta eltelt legalább minRestartGap ms
        if (currentTimeMs - lastResetMs >= minRestartGap) {
            DEBUG("CW: DEKÓDER INDÍTÁS, hang él detected\n");
            leadingEdgeTimeMs_ = currentTimeMs;
            decoderStarted_ = true;
            inInactiveState = false;
            measuringTone_ = true;
            wordSpaceProcessed_ = false;
        } else {
            // Túl rövid szünet, nem indítjuk újra
            return;
        }
    } else if (decoderStarted_ && measuringTone_ && !currentToneState) {
        trailingEdgeTimeMs_ = currentTimeMs;
        unsigned long duration = trailingEdgeTimeMs_ - leadingEdgeTimeMs_;
        DEBUG("CW: HANG VÉGE, duration: %lu ms, index: %d\n", duration, toneIndex_);

        if (duration >= DOT_MIN_MS && duration <= DASH_MAX_MS && toneIndex_ < MAX_CW_ELEMENTS) {
            rawToneDurations_[toneIndex_] = duration;
            toneIndex_++;
            DEBUG("CW: HANG ELTÁROLVA, toneIndex_: %d, duration: %lu ms\n", toneIndex_, duration);
            // Teljesen adaptív pont/vonás tanulás
            if (dotMs_ == 0 && dashMs_ == 0) {
                dotMs_ = duration;
            } else {
                // Gyorsabb tanulás: nagyobb súly az új értéknek
                const float FAST_ALPHA = 0.4f;
                if (fabsf(duration - dotRef) < fabsf(duration - dashRef)) {
                    dotMs_ = (1.0f - FAST_ALPHA) * dotMs_ + FAST_ALPHA * duration;
                } else {
                    dashMs_ = (dashMs_ == 0) ? duration : (1.0f - FAST_ALPHA) * dashMs_ + FAST_ALPHA * duration;
                }
            }
        } else {
            // Ha az első hang túl hosszú, akkor is indítsa el a tanulást (dotMs_)
            if (dotMs_ == 0 && dashMs_ == 0 && duration > 0) {
                dotMs_ = duration;
                DEBUG("CW: Első hang túl hosszú, de dotMs_ inicializálva: %lu ms\n", duration);
            }
            if (duration > DASH_MAX_MS) {
                DEBUG("CW: TÚL HOSSZÚ elem: %lu ms (max: %lu, index: %d) -- TELJES RESET!\n", duration, (unsigned long)DASH_MAX_MS, toneIndex_);
                // Teljes reset, hogy ne ragadjon bent
                measuringTone_ = false;
                decoderStarted_ = false;
                toneIndex_ = 0;
                memset(rawToneDurations_, 0, sizeof(rawToneDurations_));
                resetMorseTree();
                lastResetMs = currentTimeMs;
                resetAfterLongElement_ = true;
                // A következő hangot csak új hangnál kezdjük mérni, de csak ha elég hosszú volt a szünet
                return;
            } else if (duration < DOT_MIN_MS) {
                DEBUG("CW: TÚL RÖVID elem: %lu ms (min: %lu, index: %d) -- IGNORÁLVA!\n", duration, (unsigned long)DOT_MIN_MS, toneIndex_);
            }
        }
        measuringTone_ = false;

    } else if (decoderStarted_ && !measuringTone_ && currentToneState) {
        unsigned long gapDuration = currentTimeMs - trailingEdgeTimeMs_;
        wordSpaceProcessed_ = false;
        DEBUG("CW: HANG ÚJRAINDUL, gap: %lu ms, toneIndex_: %d\n", gapDuration, toneIndex_);
        // Karakterhatár: ha a szünet >= 2x dotRef (charGapMin), de < 5x dotRef (charGapMax)
        if (((gapDuration >= charGapMin && gapDuration < charGapMax) && toneIndex_ > 0) || (toneIndex_ >= MAX_CW_ELEMENTS && gapDuration >= charGapMin)) {
            if (toneIndex_ >= MAX_CW_ELEMENTS) {
                DEBUG("CW: Tömb tele (%d elem), kényszer dekódolás\n", toneIndex_);
            } else {
                DEBUG("CW: Karakterhatár detektálva, gap: %lu ms (küszöb: %lu-%lu ms)\n", gapDuration, charGapMin, charGapMax);
            }

            decodedChar = processCollectedElements();
            if (decodedChar != '\0') {
                lastDecodedChar_ = decodedChar;
                lastActivityMs_ = currentTimeMs;
            }
            resetMorseTree();
            toneIndex_ = 0;
            memset(rawToneDurations_, 0, sizeof(rawToneDurations_));
            leadingEdgeTimeMs_ = currentTimeMs;
            measuringTone_ = true;
        } else if (gapDuration >= (dotRef / 2) || toneIndex_ == 0) {
            DEBUG("CW: HANG ÚJRAINDUL, gap elég hosszú: %lu ms\n", gapDuration);
            leadingEdgeTimeMs_ = currentTimeMs;
            measuringTone_ = true;
        }
    } else if (decoderStarted_ && !measuringTone_ && !currentToneState) {
        unsigned long spaceDuration = currentTimeMs - trailingEdgeTimeMs_;
        // Csak akkor logoljuk a szünetet, ha aktív a dekóder vagy van eltárolt elem
        if (toneIndex_ > 0 || decoderStarted_) {
            DEBUG("CW: SZÜNET, spaceDuration: %lu ms, toneIndex_: %d\n", spaceDuration, toneIndex_);
        }
        // Karakterhatár: ha a szünet >= 2x dotRef (charGapMin), de < 5x dotRef (charGapMax)
        if (((spaceDuration >= charGapMin && spaceDuration < charGapMax) && toneIndex_ > 0) || (toneIndex_ >= MAX_CW_ELEMENTS && spaceDuration >= charGapMin)) {
            if (spaceDuration >= wordGapMin) {
                DEBUG("CW: SZÓKÖZ DETEKTÁLVA, spaceDuration: %lu ms\n", spaceDuration);
                decodedChar = ' ';
            } else {
                DEBUG("CW: KARAKTERHATÁR SZÜNET ALAPJÁN, spaceDuration: %lu ms\n", spaceDuration);
                decodedChar = processCollectedElements();
            }
            resetMorseTree();
            memset(rawToneDurations_, 0, sizeof(rawToneDurations_));
            toneIndex_ = 0;
            decoderStarted_ = false;
        }
    } else if (!decoderStarted_ && !measuringTone_ && !currentToneState) {
        // Inaktív dekóder: trailingEdgeTimeMs_ frissítése, hogy a spaceDuration ne nőjön irreálisan
        trailingEdgeTimeMs_ = currentTimeMs;
    }

    // Szóköz detektálás logikát most figyelmen kívül hagyjuk, csak karakterhatár számít!

    if (decodedChar != '\0') {
        if (isprint(decodedChar)) {
            if (decodedChar != ' ' || (decodedText.length() > 0 && decodedText[decodedText.length() - 1] != ' ')) {
                decodedText += decodedChar;
                DEBUG("CW Decoded: %s\n", decodedText.c_str());
            }
        }
        if (decodedChar == ' ') {
            lastDecodedChar_ = '\0';
            wordSpaceProcessed_ = true;
        } else {
            lastDecodedChar_ = decodedChar;
            wordSpaceProcessed_ = false;
        }
    }
*/
